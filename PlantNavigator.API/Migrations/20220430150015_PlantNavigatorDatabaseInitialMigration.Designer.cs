// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantNavigator.API.DbContexts;

#nullable disable

namespace PlantNavigator.API.Migrations
{
    [DbContext(typeof(PlantNavigatorContext))]
    [Migration("20220430150015_PlantNavigatorDatabaseInitialMigration")]
    partial class PlantNavigatorDatabaseInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PlantNavigator.API.Entities.JoinEntities.Plant_Soil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("SoilId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("SoilId");

                    b.ToTable("Plants_Soils");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.LightCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LightConditions");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("WaterConditionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaterConditionId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.Soil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Soils");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.WaterCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WaterConditions");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.JoinEntities.Plant_Soil", b =>
                {
                    b.HasOne("PlantNavigator.API.Entities.Plant", "Plant")
                        .WithMany("Plant_Soils")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantNavigator.API.Entities.Soil", "Soil")
                        .WithMany("Plant_Soils")
                        .HasForeignKey("SoilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("Soil");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.Plant", b =>
                {
                    b.HasOne("PlantNavigator.API.Entities.WaterCondition", "WaterCondition")
                        .WithMany()
                        .HasForeignKey("WaterConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaterCondition");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.Plant", b =>
                {
                    b.Navigation("Plant_Soils");
                });

            modelBuilder.Entity("PlantNavigator.API.Entities.Soil", b =>
                {
                    b.Navigation("Plant_Soils");
                });
#pragma warning restore 612, 618
        }
    }
}
